{"name":"Projectile","tagline":"Project navigation and management library for Emacs","body":"[![License GPL 3][badge-license]](http://www.gnu.org/licenses/gpl-3.0.txt)\r\n[![MELPA](http://melpa.org/packages/projectile-badge.svg)](http://melpa.org/#/projectile)\r\n[![MELPA Stable](http://stable.melpa.org/packages/projectile-badge.svg)](http://stable.melpa.org/#/projectile)\r\n[![Build Status](https://travis-ci.org/bbatsov/projectile.png?branch=master)](https://travis-ci.org/bbatsov/projectile)\r\n[![Gratipay](http://img.shields.io/gratipay/bbatsov.svg)](https://www.gratipay.com/bbatsov/)\r\n\r\n## Synopsis\r\n\r\n[![Join the chat at https://gitter.im/bbatsov/projectile](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/bbatsov/projectile?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n**Projectile** is a project interaction library for Emacs. Its goal is to\r\nprovide a nice set of features operating on a project level without\r\nintroducing external dependencies(when feasible). For instance -\r\nfinding project files has a portable implementation written in pure\r\nEmacs Lisp without the use of GNU `find` (but for performance sake an\r\nindexing mechanism backed by external commands exists as well).\r\n\r\nProjectile tries to be practical - portability is great, but if some\r\nexternal tools could speed up some task substantially and the tools\r\nare available, Projectile will leverage them.\r\n\r\nThis library provides easy project management and navigation. The\r\nconcept of a project is pretty basic - just a folder containing\r\nspecial file. Currently `git`, `mercurial`, `darcs` and `bazaar` repos\r\nare considered projects by default. So are `lein`, `maven`, `sbt`,\r\n`scons`, `rebar` and `bundler` projects. If you want to mark a folder\r\nmanually as a project just create an empty `.projectile` file in\r\nit. Some of Projectile's features:\r\n\r\n* jump to a file in project\r\n* jump to files at point in project\r\n* jump to a directory in project\r\n* jump to a file in a directory\r\n* jump to a project buffer\r\n* jump to a test in project\r\n* toggle between files with same names but different extensions (e.g. `.h` <-> `.c/.cpp`, `Gemfile` <-> `Gemfile.lock`)\r\n* toggle between code and its test\r\n* jump to recently visited files in the project\r\n* switch between projects you have worked on\r\n* kill all project buffers\r\n* replace in project\r\n* multi-occur in project buffers\r\n* grep in project\r\n* regenerate project etags or gtags (requires [ggtags](https://github.com/leoliu/ggtags)).\r\n* visit project in dired\r\n* run make in a project with a single key chord\r\n\r\nHere's a glimpse of Projectile in action:\r\n\r\n![Projectile Screenshot](screenshots/projectile.png)\r\n\r\nYou can support my work on Projectile and [all my other projects](https://github.com/bbatsov) via [gratipay](https://www.gratipay.com/bbatsov).\r\n\r\n[![Support via Gratipay](https://cdn.rawgit.com/gratipay/gratipay-badge/2.1.3/dist/gratipay.png)](https://gratipay.com/bbatsov)\r\n\r\n## Installation\r\n\r\nThe recommended way to install Projectile is via `package.el`.\r\n\r\n### package.el\r\n\r\n#### MELPA\r\n\r\nYou can install a snapshot version of Projectile from the\r\n[MELPA](http://melpa.org) repository. The version of\r\nProjectile there will always be up-to-date, but it might be unstable\r\n(albeit rarely).\r\n\r\n#### MELPA Stable\r\n\r\nYou can install the last stable version of Projectile from the\r\n[MELPA Stable](http://stable.melpa.org) repository.\r\n\r\n### el-get\r\n\r\nProjectile is also available for installation from the [el-get](https://github.com/dimitri/el-get) package manager.\r\n\r\n### Emacs Prelude\r\n\r\nProjectile is naturally part of the\r\n[Emacs Prelude](https://github.com/bbatsov/prelude). If you're a Prelude\r\nuser - Projectile is already properly configured and ready for\r\naction.\r\n\r\n## Usage\r\n\r\n### Basic setup\r\n\r\nYou can enable Projectile globally like this:\r\n\r\n```el\r\n(projectile-global-mode)\r\n```\r\n\r\nTo enable Projectile only in select modes:\r\n\r\n```el\r\n(add-hook 'ruby-mode-hook 'projectile-mode)\r\n```\r\n\r\nIf you're going to use the default `ido` completion it's\r\n**extremely highly** recommended that you install the optional\r\n[flx-ido package](https://github.com/lewang/flx), which provides a much\r\nmore powerful alternative to `ido`'s built-in `flex` matching.\r\n\r\n#### Indexing method\r\n\r\nProjectile has two modes of operation - one is portable and is\r\nimplemented in Emacs Lisp(therefore it's native to Emacs and is known\r\nas the `native indexing method`) and the other relies on external\r\ncommands like `find`, `git`, etc to obtain the list of files in a\r\nproject.\r\n\r\nSince the native indexing mode is much slower, by default the second\r\nmethod is used on all operating systems except Windows. To force the\r\nuse of native indexing in operating systems other than Windows:\r\n\r\n```el\r\n(setq projectile-indexing-method 'native)\r\n```\r\n\r\nTo force the use of external indexing in Windows:\r\n\r\n```el\r\n(setq projectile-indexing-method 'alien)\r\n```\r\n\r\nThis can speed up Projectile in Windows significantly. The disadvantage of this\r\nmethod is that it's not well supported on Windows systems. If there's problem,\r\nyou can always use native indexing mode.\r\n\r\n#### Caching\r\n\r\n#### Project files\r\n\r\nSince indexing a big project is not exactly quick (especially in Emacs\r\nLisp), Projectile supports caching of the project's files. The caching\r\nis enabled by default whenever native indexing is enabled.\r\n\r\nTo enable caching unconditionally use this snippet of code:\r\n\r\n```el\r\n(setq projectile-enable-caching t)\r\n```\r\n\r\nAt this point you can try out a Projectile command such as <kbd>C-c p f</kbd> (<kbd>M-x projectile-find-file RET</kbd>).\r\n\r\nRunning <kbd>C-u C-c p f</kbd> will invalidate the cache prior to\r\nprompting you for a file to jump to.\r\n\r\nPressing <kbd>C-c p z</kbd> will add the currently visited file to the\r\ncache for current project. Generally files created outside Emacs will\r\nbe added to the cache automatically the first time you open them.\r\n\r\nThe project cache is persistent and will be preserved during Emacs restarts.\r\n\r\nYou can purge an individual file from the cache with `M-x projectile-purge-file-from-cache` or an\r\nentire directory with `M-x projectile-purge-dir-from-cache`.\r\n\r\n##### File exists cache\r\n\r\nProjectile does many file existence checks since that is how it identifies a\r\nproject root. Normally this is fine, however in some situations the file system\r\nspeed is much slower than usual and can make emacs \"freeze\" for extended\r\nperiods of time when opening files and browsing directories.\r\n\r\nThe most common example would be interfacing with remote systems using\r\nTRAMP/ssh. By default all remote file existence checks are cached\r\n\r\nTo disable remote file exists cache that use this snippet of code:\r\n\r\n```el\r\n(setq projectile-file-exists-remote-cache-expire nil)\r\n```\r\n\r\nTo change the remote file exists cache expire to 10 minutes use this snippet\r\nof code:\r\n\r\n```el\r\n(setq projectile-file-exists-remote-cache-expire (* 10 60))\r\n```\r\n\r\nYou can also enable the cache for local file systems, that is normally not\r\nneeded but possible:\r\n\r\n```el\r\n(setq projectile-file-exists-local-cache-expire (* 5 60))\r\n```\r\n\r\n#### Using Projectile everywhere\r\n\r\nIf you want Projectile to be usable in every directory (even without the presence of project file):\r\n\r\n```el\r\n(setq projectile-require-project-root nil)\r\n```\r\n\r\nThis might not be a great idea if you start Projectile in your home folder for instance. :-)\r\n\r\n#### Switching projects\r\n\r\nWhen running `projectile-switch-project` (<kbd>C-c p p</kbd>) Projectile invokes\r\nthe command specified in `projectile-switch-project-action` (by default it is\r\n`projectile-find-file`).\r\n\r\nDepending on your personal workflow and habits, you\r\nmay prefer to alter the value of `projectile-switch-project-action`:\r\n\r\n###### `projectile-find-file`\r\n\r\nThis is the default.  With this setting, once you have selected your\r\nproject via Projectile's completion system (see below), you will\r\nremain in the completion system to select a file to visit. `projectile-find-file`\r\nis capable of retrieving files in all sub-projects under the project root,\r\nsuch as Git submodules. Currently, only Git is supported. Support for other VCS\r\nwill be added in the future.\r\n\r\n###### `projectile-find-file-in-known-projects`\r\n\r\nSimilar to `projectile-find-file` but lists all files in all known projects. Since\r\nthe total number of files could be huge, it is beneficial to enable caching for subsequent\r\nusages.\r\n\r\n###### `projectile-find-file-dwim`\r\n\r\nIf point is on a filepath, Projectile first tries to search for that\r\nfile in project:\r\n\r\n- If it finds just a file, it switches to that file instantly.  This\r\nworks even if the filename is incomplete, but there's only a single file\r\nin the current project that matches the filename at point. For example,\r\nif there's only a single file named \"projectile/projectile.el\" but the\r\ncurrent filename is \"projectile/proj\" (incomplete), projectile-find-file\r\nstill switches to \"projectile/projectile.el\" immediately because this\r\nis the only filename that matches.\r\n\r\n- If it finds a list of files, the list is displayed for selecting. A\r\nlist of files is displayed when a filename appears more than one in the\r\nproject or the filename at point is a prefix of more than two files in a\r\nproject. For example, if `projectile-find-file' is executed on a\r\nfilepath like \"projectile/\", it lists the content of that directory.\r\nIf it is executed on a partial filename like \"projectile/a\", a list of\r\nfiles with character 'a' in that directory is presented.\r\n\r\n- If it finds nothing, display a list of all files in project for\r\n  selecting.\r\n\r\n###### `projectile-dired`\r\n\r\n```el\r\n(setq projectile-switch-project-action 'projectile-dired)\r\n```\r\n\r\nWith this setting, once you have selected your project, the top-level\r\ndirectory of the project is immediately opened for you in a dired\r\nbuffer.\r\n\r\n###### `projectile-find-dir`\r\n\r\n```el\r\n(setq projectile-switch-project-action 'projectile-find-dir)\r\n```\r\n\r\nWith this setting, once you have selected your project, you will\r\nremain in Projectile's completion system to select a sub-directory of\r\nyour project, and then *that* sub-directory is opened for you in a\r\ndired buffer.  If you use this setting, then you will probably also\r\nwant to set\r\n\r\n```el\r\n(setq projectile-find-dir-includes-top-level t)\r\n```\r\n\r\nin order to allow for the occasions where you want to select the\r\ntop-level directory.\r\n\r\n#### Completion Options\r\n\r\n##### Ido\r\n\r\nBy default Projectile uses `ido` as its completion system. `ido` is\r\nextremely popular and it is built into Emacs.\r\n\r\nAs already noted above if you're going to use the `ido` completion it's\r\n**extremely highly** recommended that you install the optional\r\n[flx-ido package](https://github.com/lewang/flx), which provides a much\r\nmore powerful alternative to `ido`'s built-in `flex` matching.\r\n\r\n##### Grizzl\r\n\r\nAnother completion option is [grizzl](https://github.com/d11wtq/grizzl):\r\n\r\n```el\r\n(setq projectile-completion-system 'grizzl)\r\n```\r\n\r\n![Projectile Screenshot](screenshots/projectile-grizzl.png)\r\n\r\n`grizzl`'s advantage is that it provides good fuzzy completion\r\n(compared to `ido`'s less than stellar built-in flex matching, but inferior to `ido-flx`).\r\n\r\n##### Basic (Emacs's default)\r\n\r\nIf you don't like `ido` and `grizzl` you can use regular completion:\r\n\r\n```el\r\n(setq projectile-completion-system 'default)\r\n```\r\n\r\nYou might want to combine default completion with `icomplete-mode` for optimum results.\r\n\r\n##### Custom Completion Function\r\n\r\nYou can also set `projectile-completion-system` to a function:\r\n\r\n```el\r\n(setq projectile-completion-system 'my-custom-completion-fn)\r\n(setq projectile-completion-system\r\n      (lambda (prompt choices)\r\n        ;; ...\r\n        ))\r\n```\r\n\r\nAn example of a custom completion function is\r\n[this one](https://gist.github.com/rejeep/5933343), which only show\r\nthe file name (not including path) and if the file selected is not\r\nunique, another completion with names relative to project root\r\nappears.\r\n\r\n##### Regenerate tags\r\n\r\nTo be able to regenerate a project's tags via `projectile-tags-command`, you\r\nshould install and add to the PATH\r\n[Exuberant Ctags](http://ctags.sourceforge.net/) instead of a plain ctags, which\r\nships with Emacs distribution.\r\n\r\n### Interactive Commands\r\n\r\nHere's a list of the interactive Emacs Lisp functions, provided by Projectile:\r\n\r\nKeybinding         | Description\r\n-------------------|------------------------------------------------------------\r\n<kbd>C-c p f</kbd> | Display a list of all files in the project. With a prefix argument it will clear the cache first.\r\n<kbd>C-c p F</kbd> | Display a list of all files in all known projects.\r\n<kbd>C-c p g</kbd> | Display a list of all files at point in the project. With a prefix argument it will clear the cache first.\r\n<kbd>C-c p 4 f</kbd> | Jump to a project's file using completion and show it in another window.\r\n<kbd>C-c p 4 g</kbd> | Jump to a project's file based on context at point and show it in another window.\r\n<kbd>C-c p d</kbd> | Display a list of all directories in the project. With a prefix argument it will clear the cache first.\r\n<kbd>C-c p 4 d</kbd> | Switch to a project directory and show it in another window.\r\n<kbd>C-c p 4 a</kbd> | Switch between files with the same name but different extensions in other window.\r\n<kbd>C-c p T</kbd> | Display a list of all test files(specs, features, etc) in the project.\r\n<kbd>C-c p l</kbd> | Display a list of all files in a directory (that's not necessarily a project)\r\n<kbd>C-c p s g</kbd> | Run grep on the files in the project.\r\n<kbd>M-- C-c p s g</kbd> | Run grep on `projectile-grep-default-files` in the project.\r\n<kbd>C-c p v</kbd> | Run `vc-dir` on the root directory of the project.\r\n<kbd>C-c p b</kbd> | Display a list of all project buffers currently open.\r\n<kbd>C-c p 4 b</kbd> | Switch to a project buffer and show it in another window.\r\n<kbd>C-c p 4 C-o</kbd> | Display a project buffer in another window without selecting it.\r\n<kbd>C-c p a</kbd> | Switch between files with the same name but different extensions.\r\n<kbd>C-c p o</kbd> | Runs `multi-occur` on all project buffers currently open.\r\n<kbd>C-c p r</kbd> | Runs interactive query-replace on all files in the projects.\r\n<kbd>C-c p i</kbd> | Invalidates the project cache (if existing).\r\n<kbd>C-c p R</kbd> | Regenerates the projects `TAGS` file.\r\n<kbd>C-c p j</kbd> | Find tag in project's `TAGS` file.\r\n<kbd>C-c p k</kbd> | Kills all project buffers.\r\n<kbd>C-c p D</kbd> | Opens the root of the project in `dired`.\r\n<kbd>C-c p e</kbd> | Shows a list of recently visited project files.\r\n<kbd>C-c p s s</kbd> | Runs `ag` on the project. Requires the presence of `ag.el`.\r\n<kbd>C-c p !</kbd> | Runs `shell-command` in the root directory of the project.\r\n<kbd>C-c p &</kbd> | Runs `async-shell-command` in the root directory of the project.\r\n<kbd>C-c p c</kbd> | Runs a standard compilation command for your type of project.\r\n<kbd>C-c p P</kbd> | Runs a standard test command for your type of project.\r\n<kbd>C-c p t</kbd> | Toggle between an implementation file and its test file.\r\n<kbd>C-c p 4 t</kbd> | Jump to implementation or test file in other window.\r\n<kbd>C-c p z</kbd> | Adds the currently visited file to the cache.\r\n<kbd>C-c p p</kbd> | Display a list of known projects you can switch to.\r\n<kbd>C-c p S</kbd> | Save all project buffers.\r\n<kbd>C-c p m</kbd> | Run the commander (an interface to run commands with a single key).\r\n<kbd>C-c p ESC</kbd> | Switch to the most recently selected Projectile buffer.\r\n\r\nIf you ever forget any of Projectile's keybindings just do a:\r\n\r\n<kbd>C-c p C-h</kbd>\r\n\r\nYou can change the default keymap prefix `C-c p` like this:\r\n\r\n```el\r\n(setq projectile-keymap-prefix (kbd \"C-c C-p\"))\r\n```\r\n\r\nIt is also possible to add additional commands to\r\n`projectile-command-map` referenced by the prefix key in\r\n`projectile-mode-map`. You can even add an alternative prefix for all\r\ncommands. Here's an example that adds `super-p` as the extra prefix:\r\n\r\n```el\r\n(define-key some-keymap (kbd \"s-p\") 'projectile-command-map)\r\n```\r\n\r\nFor some common commands you might want to take a little shortcut and\r\nleverage the fairly unused `Super` key (by default `Command` on Mac\r\nkeyboards and `Windows` on Win keyboards). Here's something you can\r\nadd to your Emacs config:\r\n\r\n```el\r\n(define-key projectile-mode-map [?\\s-d] 'projectile-find-dir)\r\n(define-key projectile-mode-map [?\\s-p] 'projectile-switch-project)\r\n(define-key projectile-mode-map [?\\s-f] 'projectile-find-file)\r\n(define-key projectile-mode-map [?\\s-g] 'projectile-grep)\r\n```\r\n\r\nNote that the `Super` keybindings are not usable in Windows. Emacs\r\nPrelude already adds those extra keybindings.\r\n\r\n### Ignoring files\r\n\r\nIf you'd like to instruct Projectile to ignore certain files in a\r\nproject, when indexing it you can do so in the `.projectile` file by\r\nadding each path to ignore, where the paths all are relative to the\r\nroot directory and start with a slash. Everything ignored should be\r\npreceded with a - sign. Alternatively, not having any prefix at all\r\nalso means to ignore the directory or file pattern that follows.\r\nHere's an example for a typical Rails application:\r\n\r\n```\r\n-/log\r\n-/tmp\r\n-/vendor\r\n-/public/uploads\r\n```\r\n\r\nThis would ignore the folders only at the root of the project.\r\nProjectile also supports relative pathname ignores:\r\n\r\n```\r\n-tmp\r\n-*.rb\r\n-*.yml\r\n-models\r\n```\r\n\r\nYou can also ignore everything except certain subdirectories. This is\r\nuseful when selecting the directories to keep is easier than selecting\r\nthe directories to ignore, although you can do both. To select\r\ndirectories to keep, that means everything else will be ignored.\r\n\r\nExample:\r\n\r\n```\r\n+/src/foo\r\n+/tests/foo\r\n```\r\n\r\nKeep in mind that you can only include subdirectories, not file\r\npatterns.\r\n\r\nIf both directories to keep and ignore are specified, the directories\r\nto keep first apply, restricting what files are considered. The paths\r\nand patterns to ignore are then applied to that set.\r\n\r\n### Customizing project root files\r\n\r\nYou can set the values of `projectile-project-root-files`,\r\n`projectile-project-root-files-top-down-recurring`,\r\n`projectile-project-root-files-bottom-up` and\r\n`projectile-project-root-files-functions` to customize how project roots are\r\nidentified.\r\n\r\nTo customize project root files settings:\r\n\r\n```\r\nM-x customize-group RET projectile RET\r\n```\r\n\r\n### Storing project settings\r\n\r\nFrom project to project some things may differ even in same language -\r\ndifferent coding styles, separate auto-completion sources, etc.  If\r\nyou need to set some variables according to selected project, you can\r\nuse standard Emacs feature called\r\n[Per-Directory Local Variables](http://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html). To\r\nuse it you must create file named `.dir-locals.el` inside project\r\ndirectory. This file must contain something like this:\r\n\r\n```\r\n((nil . ((secret-ftp-password . \"secret\")\r\n         (compile-command . \"make target-x\")\r\n         (eval . (progn\r\n                   (defun my-project-specific-function ()\r\n                     ;; ...\r\n                     ))))\r\n (c-mode . (c-file-style . \"BSD\")))\r\n```\r\n\r\nThe top-level alist member referenced with the key `nil` applies to the\r\nentire project. A key with the name `eval` will evaluate its\r\narguments. In the example above, this is used to create a function. It\r\ncould also be used to e.g. add such a function to a key map.\r\n\r\nHere are a few examples of how to use this feature with Projectile.\r\n\r\n#### Configuring Projectile's Behavior\r\n\r\nProjectile offers many customizable variables (via `defcustom`) that\r\nallows us to customize its behavior. Because of how `dir-locals.el`\r\nworks, it can be used to set these customizations on a per-project basis.\r\n\r\nYou could enable caching for a project in this way:\r\n\r\n```\r\n((nil . ((projectile-enable-caching . t))))\r\n```\r\n\r\nIf one of your projects had a file that you wanted Projectile to\r\nignore, you would customize Projectile by:\r\n\r\n```\r\n((nil . ((projectile-globally-ignored-files . '(\"MyBinaryFile\")))))\r\n```\r\n\r\nIf you wanted to wrap the git command that Projectile uses to find list\r\nthe files in you repository, you could do:\r\n\r\n```\r\n((nil . ((projectile-git-command . \"/path/to/other/git ls-files -zco --exclude-standard\"))))\r\n```\r\n\r\n#### Configure Project's Compilation Command\r\n\r\nOverriding pieces of Projectile might require some hacking on your\r\npart -- reading the source, advising functions, etc.\r\n\r\nFor example, by reading Projectile's source, you could discover that\r\na project's compilation command can be specified with this code:\r\n\r\n```\r\n((nil . ((eval . (progn\r\n                   ;; require projectile; the following code will fail\r\n                   ;; without it.\r\n                   (require 'projectile)\r\n                   ;; provide a fake \"recent\" compilation cmd\r\n                   ;; which will be returned by the function\r\n                   ;; `projectile-compilation-command`\r\n                   (puthash (projectile-project-root)\r\n                            \"./command-to-compile-your-project.sh\"\r\n                            projectile-compilation-cmd-map))))))\r\n```\r\n\r\n#### Configure Project's Test Command\r\n\r\nAltering the test command works in the same way as altering the\r\ncompilation command. Comments are left out in this example for\r\nbrevity and clarity:\r\n\r\n```\r\n((nil . ((eval . (progn\r\n                   (require 'projectile)\r\n                   (puthash (projectile-project-root)\r\n                            \"./test-project.sh\"\r\n                            projectile-test-cmd-map))))))\r\n```\r\n\r\n### Helm Integration\r\n\r\nProjectile can be integrated with [Helm](https://github.com/emacs-helm/helm) via\r\n`helm-source-projectile-projects`, `helm-source-projectile-files-list`,\r\n`helm-source-projectile-buffers-list` and `helm-source-projectile-recentf-list`\r\nsources (available in `helm-projectile.el`). There is also an example function\r\nfor calling Helm with the Projectile file source. You can call it like this:\r\n\r\n```\r\nM-x helm-projectile\r\n```\r\n\r\nor even better - invoke the key binding <kbd>C-c p h</kbd>.\r\n\r\nFor those who prefer helm to ido, the command `helm-projectile-switch-project`\r\ncan be used to replace `projectile-switch-project` to switch project. Please\r\nnote that this is different from simply setting `projectile-completion-system`\r\nto `helm`, which just enables projectile to use the Helm completion to complete\r\na project name. The benefit of using `helm-projectile-switch-project` is that on\r\nany selected project we can fire many actions, not limited to just the \"switch\r\nto project\" action, as in the case of using helm completion by setting\r\n`projectile-completion-system` to `helm`. Currently, there are five actions:\r\n\"Switch to project\", \"Open Dired in project's directory\", \"Open project root in\r\nvc-dir or magit\", \"Switch to Eshell\" and \"Grep project files\". We will add more\r\nand more actions in the future.\r\n\r\n`helm-projectile` is capable of opening multiple files by marking the files with\r\n<kbd>C-SPC</kbd> or mark all files with <kdb>M-a</kbd>. Then, press <kdb>RET</kbd>,\r\nall the selected files will be opened.\r\n\r\nNote that the helm grep is different from `projectile-grep` because the helm\r\ngrep is incremental. To use it, select your projects (select multiple projects\r\nby pressing C-SPC), press \"C-s\" (or \"C-u C-s\" for recursive grep), and type your\r\nregexp. As you type the regexp in the mini buffer, the live grep results are\r\ndisplayed incrementally.\r\n\r\n`helm-projectile` also provides Helm versions of common Projectile commands. Currently,\r\nthese are the supported commands:\r\n\r\n* `helm-projectile-switch-project`\r\n* `helm-projectile-find-file`\r\n* `helm-projectile-find-file-in-known-projects`\r\n* `helm-projectile-find-file-dwim`\r\n* `helm-projectile-find-dir`\r\n* `helm-projectile-recentf`\r\n* `helm-projectile-switch-to-buffer`\r\n* `helm-projectile-grep` (can be used for both grep or ack)\r\n* `helm-projectile-ag`\r\n* Replace Helm equivalent commands in `projectile-commander`\r\n* A virtual directory manager that is unique to Helm Projectile\r\n\r\nWhy should you use these commands compared with the normal Projectile commands, even\r\nif the normal commands use `helm` as `projectile-completion-system`? The answer is,\r\nHelm specific commands give more useful features. For example, `helm-projectile-switch-project`\r\nallows opening a project in Dired, Magit or Eshell. `helm-projectile-find-file` reuses actions in\r\n`helm-find-files` (which is plenty) and able to open multiple files. Another reason is that in a large\r\nsource tree, helm-projectile could be slow because it has to open all available sources.\r\n\r\nIf you want to use these commands, you have to activate it to replace the normal Projectile\r\ncommands:\r\n\r\n```lisp\r\n;; (setq helm-projectile-fuzzy-match nil)\r\n(require 'helm-projectile)\r\n(helm-projectile-on)\r\n```\r\n\r\nIf you already activate helm-projectile key bindings and you don't like it, you can turn it off\r\nand use the normal Projectile bindings with command `helm-projectile-off`. Similarly, if you want to\r\ndisable fuzzy matching in Helm Projectile (it is enabled by default), you must set `helm-projectile-fuzzy-match`\r\nto nil before loading `helm-projectile`.\r\n\r\nTo fully learn Helm Projectile and see what it is capable of, you should refer to this guide:\r\n[Exploring large projects with Projectile and Helm Projectile](http://tuhdo.github.io/helm-projectile.html).\r\n\r\nObviously you need to have Helm installed for this to work :-)\r\n\r\n![Helm-Projectile Screenshot](screenshots/helm-projectile.png)\r\n\r\n### Work with Perspective Mode\r\n\r\n[Perspective](https://github.com/nex3/perspective-el) is a minor mode\r\nthat provides the ability to manage different workspaces. If you need\r\nto open many projects at the same time, perspective can help you keep\r\neach project related buffers and windows setting separate from other\r\nprojects, similar to multiple spaces on MacOS, which allows you to\r\nfocus on the files of the current active project.\r\n\r\nA picture says a thousand words. See below screenshot to get a concrete idea.\r\n\r\nOnly current project related files showing in minibuffer when I call\r\n`ido-switch-buffer`, and an indicator in mode line tells me which\r\nproject that I'm in.\r\n\r\n![Persp-Projectile Screenshot 1](screenshots/persp-projectile1.png)\r\n\r\nWhen I switch to a different project, I get a clean 'perspective'.\r\n\r\n![Persp-Projectile Screenshot 2](screenshots/persp-projectile2.png)\r\n\r\nTo integrate perspective with Projectile, first of all, you need to\r\ninstall perspective. You can install it by:\r\n\r\n```\r\nM-x package-install\r\n```\r\n\r\nThen type `perspective` in the minibuffer, as below:\r\n\r\n```\r\nInstall package: perspective\r\n```\r\n\r\nSecondly, make sure `persp-projectile.el` is in your Emacs load path. Then require it in your init file.\r\n\r\n```el\r\n(persp-mode)\r\n(require 'persp-projectile)\r\n```\r\n\r\nYou're ready to go! Try the interactive command\r\n`projectile-persp-switch-project`, or you may also bind it to some\r\nhandy keybinding.\r\n\r\n```el\r\n(define-key projectile-mode-map (kbd \"s-s\") 'projectile-persp-switch-project)\r\n```\r\n\r\n### Idle Timer\r\n\r\nProjectile can be configured to run the hook\r\n`projectile-idle-timer-hook` every time Emacs is in a project and has\r\nbeen idle for `projectile-idle-timer-seconds` seconds (default is 30\r\nseconds).  To enable this feature, run:\r\n\r\n```\r\nM-x customize-group RET projectile RET\r\n```\r\n\r\nand set `projectile-enable-idle-timer` to non-nil.  By default,\r\n`projectile-idle-timer-hook` runs `projectile-regenerate-tags`.  Add\r\nadditional functions to the hook using `add-hook`:\r\n\r\n```el\r\n(add-hook 'projectile-idle-timer-hook 'my-projectile-idle-timer-function)\r\n```\r\n\r\n### Mode line indicator\r\n\r\nBy default the minor mode indicator of Projectile appears in the form\r\n\" Projectile[ProjectName]\". This is configurable via the custom variable\r\n`projectile-mode-line`, which expects a sexp like\r\n`'(:eval (format \" Proj[%s]\" (projectile-project-name)))`\r\n\r\n## Caveats\r\n\r\n* Traversing the project directory programmatically (instead of using\r\n  something like GNU find) is not very fast. On the other hand - it's\r\n  portable. Unlike\r\n  [find-file-in-project](https://github.com/bbatsov/find-file-in-project),\r\n  projectile's jump-to-file will work on any OS.\r\n* Some operations like search(grep) depend (presently) on external\r\n  utilities such as `find`.\r\n\r\n## Would you like to know more?\r\n\r\nCheck out the [Projectile's project page](http://batsov.com/projectile).\r\n\r\n## Known issues\r\n\r\nCheck out the project's\r\n[issue list](https://github.com/bbatsov/projectile/issues?sort=created&direction=desc&state=open)\r\na list of unresolved issues. By the way - feel free to fix any of them\r\nand sent me a pull request. :-)\r\n\r\n## Contributors\r\n\r\nHere's a [list](https://github.com/bbatsov/projectile/contributors) of all the people who have contributed to the\r\ndevelopment of Projectile.\r\n\r\n## Contribution\r\n\r\nAll contributions are welcome, as long as they don't break anything\r\n:-) To make sure you didn't introduce any regressions it's a good idea\r\nto run the tests first.\r\n\r\nInstall [cask](https://github.com/rejeep/cask.el) if you haven't\r\nalready, then:\r\n\r\n```bash\r\n$ cd /path/to/projectile\r\n$ cask\r\n```\r\n\r\nRun all tests with:\r\n\r\n```bash\r\n$ make test\r\n```\r\n\r\nYou can also support my work on Projectile and [all my other projects](https://github.com/bbatsov) via [gratipay](https://www.gratipay.com/bbatsov).\r\n\r\n[![Support via Gratipay](https://cdn.rawgit.com/gratipay/gratipay-badge/2.1.3/dist/gratipay.png)](https://gratipay.com/bbatsov)\r\n\r\n## Changelog\r\n\r\nA fairly extensive changelog is available [here](CHANGELOG.md).\r\n\r\n## Freenode\r\n\r\nIf you're into IRC you can visit the `#projectile` channel on Freenode.\r\n\r\n## Bugs & Improvements\r\n\r\nBug reports and suggestions for improvements are always\r\nwelcome. GitHub pull requests are even better! :-)\r\n\r\nTogether we can create the ultimate project management tool for Emacs.\r\n\r\nCheers,<br/>\r\n[Bozhidar](https://twitter.com/bbatsov)\r\n\r\n[badge-license]: https://img.shields.io/badge/license-GPL_3-green.svg\r\n","google":"UA-22917580-1","note":"Don't delete this file! It's used internally to help with page regeneration."}